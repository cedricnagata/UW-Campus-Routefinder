## CSE 331 hw-graph Part 2 Questions

NOTE: This file is used as part of hw-graph-part2, and is not due as part of the hw-graph-part1
submission. You may leave it blank for hw-graph-part1.

## Part 1
###########################################################################

A few examples of possible Graph representations:

    A: A collection of nodes and a collection of edges.
    B: An adjacency list, in which each node is associated with a list of its outgoing edges.
    C: An adjacency matrix, which explicitly represents, for every pair ⟨A,B⟩ of nodes, whether there 
       is a link from A to B, and how many.

1. In two or three sentences, explain an advantage and a disadvantage of each of the
representations listed above (for example, in terms of runtime complexity, space
complexity, or ease of implementation).

An advantage of using a collection of nodes and a collection of edges is that the time complexity
for adding a new edge will be O(1), however, a disadvantage is that it will be harder to reference
edges from nodes and vice verse because they are in separate collections.
An advantage of using an adjacency list is that the time complexity for adding a new node or
edge is O(1), however, a disadvantage is that implementation is more difficult because each node
has to have a reference set of edges.
An advantage of using an adjacency matrix is that the time complexity for checking if the graph
contains an edge would be O(1). However, a disadvantage would be again with implementation, as
there must be comparisons for every pair of nodes to see if there is an edge.


2. In two to three sentences, describe the representation you chose and explain why you
chose it. If you chose to use a different representation than one of the three we described
above, be sure to list its advantages and disadvantages, too.

I used an adjacency list because, this strategy allowed me to use a map to store the entire graph,
as I could use the nodes as keys and have a set of outgoing edges as the values for each key.
This also makes it easy to traverse the graph, as each node stores all the paths it has to other nodes,
so traversing the graph would be easier than the other implementations. Also searching for specific
nodes and edges is simple because


## Part 4
###########################################################################

    (Please keep your answers brief and to-the-point.)

1. Describe any new tests you added and why you added them, or why you feel that your original
tests alone are sufficient.

I feel that my original tests alone were sufficient because as I implemented my methods, I did not
change my original specifications, therefore not warranting any new tests, as I did not create any
new methods.


2. Did you make any changes to your specifications as you were implementing your Graph? (yes/no)
If yes, describe your changes and why you made them.

No, I did not make any changes to my specifications, as I was satisfied with all the methods I
originally specified.
